{"version":3,"file":"static/js/4875.da97b817.chunk.js","mappings":"+LACA,MAAMA,GAAeC,EAAAA,EAAAA,MAAK,IAAM,gCAC1BC,GAAgBD,EAAAA,EAAAA,MAAK,IAAM,gCAC3BE,GAAaF,EAAAA,EAAAA,MAAK,IAAM,gCACxBG,GAAYH,EAAAA,EAAAA,MAAK,IAAM,gCAiD7B,EA/CqBI,IAAoB,IAAnB,UAAEC,GAAWD,EAGjC,MAAME,EAAoB,IAGnBC,EAAaC,IAAmBC,EAAAA,EAAAA,UAAS,IACzCC,EAAWC,IAAiBF,EAAAA,EAAAA,UAAS,CAAC,EAAEF,IACzCK,EAAmCC,KAAKC,MAAMT,EAAUU,OAAOR,GAC/DS,EAAmCX,EAAUU,OAAOR,EAE1D,IAAIU,EAAa,GACbC,EAAa,EAAC,GAClB,GAAgB,IAAbF,EACD,IAAI,IAAIG,EAAI,EAAGA,GAAKP,EAAUO,IAC5BF,EAAWG,KAAKD,GACbA,EAAI,GAAKD,EAAWE,MAAK,QAEzB,GAAgB,IAAbJ,EACR,IAAI,IAAIG,EAAI,EAAGA,EAAIP,EAAUO,IAC3BF,EAAWG,KAAKD,GACbA,EAAI,GAAKD,EAAWE,MAAK,GAGhC,MAAOC,EAAaC,IAAkBb,EAAAA,EAAAA,UAASS,IAGxCK,EAAQC,IAAaf,EAAAA,EAAAA,UAAS,GAMrC,OACEgB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC1B,EAAU,CAACsB,UAAYA,KACxBI,EAAAA,EAAAA,KAACzB,EAAS,KACVyB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iGAAgGF,SAE3GtB,EAAUyB,KAAgB,IAAXP,EAXvB,SAAoBQ,EAAGC,GAAK,OAAOD,EAAEE,QAAQC,OAAOC,cAAcH,EAAEC,QAAQC,OAAS,EAWrB,IAAXX,EAVrD,SAAuBQ,EAAGC,GAAK,OAAOD,EAAEE,QAAQG,MAAQJ,EAAEC,QAAQG,KAAO,EAUwB,IAAXb,EATtF,SAAyBQ,EAAGC,GAAK,OAAOA,EAAEC,QAAQG,MAAQL,EAAEE,QAAQG,KAAO,EAC3E,SAAuBL,EAAGC,GAAK,MAAO,GAAMnB,KAAKwB,QAAU,GAQ+EC,MAAM5B,EAAU,GAAGA,EAAU,IAAI6B,IACjKC,IAAcZ,EAAAA,EAAAA,KAAC7B,EAAY,IAA0ByC,GAAnBA,EAASC,QAGjDb,EAAAA,EAAAA,KAAC3B,EAAa,CAACyC,MAzCP,GAyCqBC,MAAOtC,EAAWuC,cAAetC,EAAmBC,YAAaA,EAAaG,UAAWA,EAAWW,YAAaA,EAAaJ,WAAYA,EAAYN,aAAcA,EAAcW,eAAgBA,O","sources":["components/views/inmueble/InmuebleList.js"],"sourcesContent":["import { lazy, useState } from 'react';\r\nconst InmuebleCard = lazy(() => import('./InmuebleCard.js'));\r\nconst PaginationBar = lazy(() => import('../../bars/pagination/PaginationBar.js'));\r\nconst SortingBar = lazy(() => import('../../bars/sort/SortingBar.js'));\r\nconst WhiteLine = lazy(() => import('../../forms/whiteline/WhiteLine.js'));\r\n\r\nconst InmuebleList = ({ inmuebles }) => {\r\n  /* Query */\r\n  let query = '';\r\n  const inmueblesFiltered = [];\r\n\r\n  /* Pagination */\r\n  const [itemPerPage, setItemPerPage ] = useState(8);                 // Se define el número de items por página\r\n  const [indexPage, setIndexPage ] = useState([0,itemPerPage]);       // Se calculan los indices de la paginación para el filtro Slice(x,y) que entrega un rango de los items de x a y\r\n  const numPages = ((query.length === 0) ? Math.floor(inmuebles.length/itemPerPage) : Math.floor(inmueblesFiltered.length/itemPerPage));                   // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n  const resPages = ((query.length === 0) ? inmuebles.length%itemPerPage : inmueblesFiltered.length%itemPerPage);                   // Se calcula la cantidad de páginas = cantidad de items/item por página\r\n\r\n  let indexPages = [];\r\n  let activePage = [true];                                            // [true]\r\n  if(resPages !== 0 ){\r\n    for(let i = 0; i <= numPages; i++) { \r\n      indexPages.push(i);                                             // [0,1,2,3]\r\n      if(i < 0) { activePage.push(false); }                           // [true,false,false,false]\r\n    }\r\n  } else if(resPages === 0 ){\r\n    for(let i = 0; i < numPages; i++) { \r\n      indexPages.push(i);                                             // [0,1,2,3]\r\n      if(i < 0) { activePage.push(false); }                           // [true,false,false,false]\r\n    }\r\n  }\r\n  const [activePages, setActivePages] = useState(activePage);         // [true,false,false,false]\r\n\r\n  /* Sort */\r\n  const [sortBy, setSortBy] = useState(0);\r\n  function sortByName(a, b) { return a.detalle.nombre.localeCompare(b.detalle.nombre); }\r\n  function sortByValueUp(a, b) { return a.detalle.valor - b.detalle.valor; }\r\n  function sortByValueDown(a, b) { return b.detalle.valor - a.detalle.valor; }\r\n  function sortByShuffle(a, b) { return 0.5 - Math.random(); }\r\n\r\n  return (\r\n    <>\r\n      <SortingBar setSortBy={ setSortBy } />\r\n      <WhiteLine />\r\n      <div className='row row-cols-1 row-cols-lg-4 row-cols-md-3 row-cols-sm-2 g-3 animate__animated animate__fadeIn'>\r\n        { \r\n          inmuebles.sort(sortBy === 1 ? sortByName : ( sortBy === 2 ? sortByValueUp : ( sortBy === 3 ? sortByValueDown : sortByShuffle ) )).slice(indexPage[0],indexPage[1]).map( \r\n            inmueble => ( <InmuebleCard key={ inmueble.id } { ...inmueble } /> ))\r\n        }\r\n      </div>\r\n      <PaginationBar query={query} array={inmuebles} arrayFiltered={inmueblesFiltered} itemPerPage={itemPerPage} indexPage={indexPage} activePages={activePages} indexPages={indexPages} setIndexPage={setIndexPage} setActivePages={setActivePages} /> \r\n    </>\r\n  )\r\n}\r\nexport default InmuebleList;"],"names":["InmuebleCard","lazy","PaginationBar","SortingBar","WhiteLine","_ref","inmuebles","inmueblesFiltered","itemPerPage","setItemPerPage","useState","indexPage","setIndexPage","numPages","Math","floor","length","resPages","indexPages","activePage","i","push","activePages","setActivePages","sortBy","setSortBy","_jsxs","_Fragment","children","_jsx","className","sort","a","b","detalle","nombre","localeCompare","valor","random","slice","map","inmueble","id","query","array","arrayFiltered"],"sourceRoot":""}