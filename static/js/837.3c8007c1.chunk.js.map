{"version":3,"file":"static/js/837.3c8007c1.chunk.js","mappings":"6MACA,MAAMA,GAAcC,EAAAA,EAAAA,MAAK,IAAM,gCAElBC,EAAYC,IAA4G,IAA3G,GAAEC,EAAE,YAACC,EAAW,YAACC,EAAY,IAAG,KAACC,EAAI,QAACC,EAAO,SAACC,EAAS,EAAC,gBAACC,EAAgB,EAAC,SAACC,GAAS,EAAK,UAACC,GAAWT,EAC3H,MAAMU,EAAOJ,GACNK,EAAWC,IAAgBC,EAAAA,EAAAA,UAAS,CAAEC,KAAM,MAC5CC,EAAYC,IAAiBH,EAAAA,EAAAA,UAAS,IAE7C,GAAKT,EAAKM,KAAO,EAAI,CACjB,MAAMO,EAAS,IAAIC,WACnBD,EAAOE,cAAcf,GACrBa,EAAOG,OAAS,KAAQR,EAAa,CAAEE,KAAMG,EAAOI,UACpDJ,EAAOK,QAAWC,IAAYC,QAAQC,IAAI,wCAAyCF,GACvF,CAaA,OAZAG,EAAAA,EAAAA,WAAU,KACN,GAAKtB,EAAKuB,OAAS,EAAI,CACnB,MAAMC,EAAc,CAAC,CAACd,KAAM,KAC5B,IAAI,IAAIe,EAAI,EAAGA,EAAIzB,EAAKuB,OAAQE,IAAK,CACjC,MAAMC,EAAiB,IAAIZ,WAC3BY,EAAeX,cAAcf,EAAKyB,IAClCC,EAAeV,OAAS,KAAQQ,EAAYC,GAAK,CAAEf,KAAMgB,EAAeT,QAAUL,EAAcY,IAChGE,EAAeR,QAAWC,IAAYC,QAAQC,IAAI,wCAAyCF,GAC/F,CACJ,GACF,CAACnB,EAAKA,EAAKuB,UAGTI,EAAAA,EAAAA,MAAA,OAAKtB,UAAU,gEAAgE,yBAAmBuB,SAAA,EAC9FD,EAAAA,EAAAA,MAAA,OAAK9B,GAAG,YAAYQ,UAAWA,EAAY,yDAAyDuB,SAAA,EAChGC,EAAAA,EAAAA,KAAA,SAAOC,QAAUjC,EAAKkC,MAAO,CAAC,OAAS,WAAWH,SAExC5B,EAAKM,KAAO,GACNuB,EAAAA,EAAAA,KAAA,OAAKG,IAAKzB,EAAUG,KAAMb,GAAK,SAAWA,EAAKQ,UAAU,0BAA0B0B,MAAO,CAAC,OAAUzB,EAAO,MAAM,MAASA,EAAO,OAAQ2B,IAAM,SAAWpC,IACzJG,EAAKuB,OAAS,EACRZ,EAAWuB,IAAKC,IACLN,EAAAA,EAAAA,KAAA,OAAKG,IAAKG,EAAMzB,KAAuBL,UAAU,0BAA0B0B,MAAO,CAAC,OAAUzB,EAAO,MAAM,MAASA,EAAO,OAAQ2B,IAAKE,EAAMC,MAAlHD,EAAMC,QAE7CP,EAAAA,EAAAA,KAACpC,EAAW,CAAC4C,MAAO,UAAWC,YAAanC,EAAiBoC,OAAQjC,EAAMkC,MAAOlC,EAAMD,UAAU,4CAGzHwB,EAAAA,EAAAA,KAAA,SAAOY,KAAK,OAAO5C,GAAKA,EAAK6C,OAAS3C,EAAc4C,SAAUA,IAAM1C,EAASG,EAAWwC,SAASC,eAAgBhD,GAAKiD,MAAQF,SAASC,eAAgBhD,GAAKiD,MAAM,IAAM1C,SAAWA,QAEvLyB,EAAAA,EAAAA,KAAA,SAAOC,QAAQ,YAAYzB,UAAU,kDAAiDuB,SAAI9B,QAItG,G","sources":["components/forms/inputs/InputFile.js"],"sourcesContent":["import { lazy, useState, useEffect } from 'react';\r\nconst ImageSearch = lazy(() => import('../../icons/image/ImageSearch.js'));\r\n\r\nexport const InputFile = ({ id,placeholder,acceptFiles='*',file,setFile,iconSize=1,iconStrokeWidth=1,multiple=false,className }) => {\r\n    const size = iconSize;\r\n    const [imageData, setImageData] = useState({ data: '' });           // Convert image -> image base 64\r\n    const [imagesData, setImagesData] = useState([]);                   // Convert image -> image base 64\r\n\r\n    if ( file.size > 0 ) { \r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(file);\r\n        reader.onload = () => { setImageData({ data: reader.result }); };\r\n        reader.onerror = (error) => { console.log('Error input file img -> img base 64: ', error); };\r\n    }\r\n    useEffect(() => { \r\n        if ( file.length > 0 ) {\r\n            const arrayimages = [{data: ''}];\r\n            for(let i = 0; i < file.length; i++) {\r\n                const readerMultiple = new FileReader();\r\n                readerMultiple.readAsDataURL(file[i])\r\n                readerMultiple.onload = () => { arrayimages[i] = { data: readerMultiple.result }; setImagesData(arrayimages); };\r\n                readerMultiple.onerror = (error) => { console.log('Error input file img -> img base 64: ', error); };\r\n            }\r\n        }\r\n    },[file,file.length]);\r\n\r\n    return (\r\n        <div className=\"form-floating text-center text-nowrap text-truncate shadow-sm\" data-mdb-input-init>\r\n            <div id='inputFile' className={className + ' image-upload img-thumbnail py-1 py-md-1 py-sm-5 h-100'}>\r\n                <label htmlFor={ id } style={{\"cursor\":\"pointer\"}} >\r\n                    { \r\n                        ( file.size > 0 ) \r\n                            ?   <img src={imageData.data} id={ 'image-' + id } className='img-thumbnail shadow-sm' style={{\"height\": size + \"rem\",\"width\": size + \"rem\"}} alt={ 'image-' + id }/>\r\n                            :   ( file.length > 0 )\r\n                                    ?   imagesData.map((image) => { \r\n                                            return(<img src={image.data} key={image.name} className='img-thumbnail shadow-sm' style={{\"height\": size + \"rem\",\"width\": size + \"rem\"}} alt={image.name}/>)\r\n                                        })\r\n                                    :  <ImageSearch color={'#aaaaaa'} strokeWidth={iconStrokeWidth} height={size} width={size} className='mt-1 mt-md-1 mt-sm-5 mb-md-0 mb-sm-2' />\r\n                    }\r\n                </label>\r\n                <input type=\"file\" id={ id } accept={ acceptFiles } onChange={() => setFile( multiple ? document.getElementById( id ).files : document.getElementById( id ).files[0]) } multiple={ multiple } />\r\n            </div>\r\n            <label htmlFor='inputFile' className=\"form-label text-muted text-nowrap text-truncate\" >{ placeholder }</label>\r\n        </div>\r\n    )\r\n}\r\nexport default InputFile;"],"names":["ImageSearch","lazy","InputFile","_ref","id","placeholder","acceptFiles","file","setFile","iconSize","iconStrokeWidth","multiple","className","size","imageData","setImageData","useState","data","imagesData","setImagesData","reader","FileReader","readAsDataURL","onload","result","onerror","error","console","log","useEffect","length","arrayimages","i","readerMultiple","_jsxs","children","_jsx","htmlFor","style","src","alt","map","image","name","color","strokeWidth","height","width","type","accept","onChange","document","getElementById","files"],"sourceRoot":""}